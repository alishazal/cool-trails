<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/static/favicon.ico" type="image/x-icon">
  <title>Cool Trails - {{trail.name}}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="/static/styles.css">
  <style>
    #map {
      height: 400px;
    }
  </style>
</head>
<body>
  <div class="container mt-0 mt-md-4">
<div class="position-relative text-center mb-3">
  
<a href="/search?q={{q}}" class="btn btn-outline-secondary position-absolute start-0 top-0 d-none d-md-inline">
  ←
</a>
<div class="d-block d-md-none text-center" style="margin-top: 0; padding-top: 0;">
  <a href="/" class="text-decoration-none d-inline-block">
    <img src="/static/logo_dark.svg" alt="Cool Trails Logo" style="height: 80px; margin-top: 0; padding-top: 0;">
  </a>
</div>
  <h1 class="m-0">{{trail.name}}</h1>
</div>

    <div class="alert alert-info d-flex align-items-center gap-2 py-2 px-3 mb-3">
      <span class="fw-bold">📍 Location:</span>
      <span class="text-muted">{{trail.location}}</span>
    </div>
    
    <!-- Map container -->
    <div class="position-relative">
      <div id="shade-loader"
          class="position-absolute top-50 start-50 translate-middle d-flex align-items-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Calculating shading…</span>
        </div>
        <span class="ms-2">Calculating shade…</span>
      </div>
      <div class="d-flex gap-4 mb-2">
        <div><span class="badge bg-primary text-dark">&nbsp;&nbsp;</span> Route</div>
        <div><span class="badge bg-success">&nbsp;&nbsp;</span> Shaded</div>
        <div><span class="badge orange-badge text-dark">&nbsp;&nbsp;</span> Not shaded</div>
      </div>
      <div id="map"></div>
    </div>

    <!-- packing list container -->
    <div id="packingListContainer"></div>

    <!-- Start trail button and get packing recs button -->
    <div class="row g-2 mt-3">
      <div class="col-6">
        <button id="startTrail" class="btn btn-success w-100">Start Trail</button>
      </div>
      <div class="col-6">
        <button id="getPackingRecs" class="btn btn-warning w-100">Get Packing Recs 🤖</button>
      </div>
    </div>

    <!-- Full-width back button -->
    <div class="row mt-2">
      <div class="col-12">
        <a href="/search?q={{q}}" class="btn btn-secondary w-100">Back to Search</a>
      </div>
    </div>
    <hr>

    <!-- Packing Recs will go here -->
    <div id="packing-loader" class="d-none justify-content-center my-3">
      <div class="spinner-border text-warning" role="status">
        <span class="visually-hidden">Loading packing recommendations…</span>
      </div>
    </div>
    <div id="packingRecsSection" class="mb-4"></div>

    <!-- Trail Info Card -->
    <div class="card shadow-sm mb-4">
      <div class="card-header bg-success text-white">
        <h5 class="mb-0">Trail Information</h5>
      </div>
      <div class="card-body p-0">
        <table class="table table-striped table-hover table-sm mb-0">
          <tbody>
            <tr>
              <th scope="row">🗺️ Name</th>
              <td>{{trail_info.name}}</td>
            </tr>
            <tr>
              <th scope="row">🆕 Alternate Name</th>
              <td>{{trail_info.alt_name}}</td>
            </tr>
            <tr>
              <th scope="row">🛣️ Highway Type</th>
              <td>{{trail_info.highway}}</td>
            </tr>
            <tr>
              <th scope="row">⛰️ Incline</th>
              <td>{{trail_info.incline}}</td>
            </tr>
            <tr>
              <th scope="row">🌿 Surface</th>
              <td>{{trail_info.surface}}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Trail Weather Card -->
    <div class="card shadow-sm mb-4">
      <div class="card-header bg-warning text-white">
        <h5 class="mb-0">Trail Weather</h5>
      </div>
      <div class="card-body p-0">
        <table class="table table-striped table-hover table-sm mb-0">
          <tbody>
            <tr>
              <th scope="row">📃 Description</th>
              <td id="weatherDesc"></td>
            </tr>
            <tr>
              <th scope="row">🌡️ Temperature</th>
              <td id="weatherTemp"></td>
            </tr>
            <tr>
              <th scope="row">💧 Humidity</th>
              <td id="weatherHumidity"></td>
            </tr>
            <tr>
              <th scope="row">💨 Wind Speed</th>
              <td id="weatherWind"></td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

<!-- Stylized header -->
<div class="mt-5 mb-4 d-flex align-items-center gap-3">
  <div class="bg-primary text-white rounded-circle d-flex justify-content-center align-items-center" style="width: 44px; height: 44px; font-size: 1.25rem;">
    📝
  </div>
  <h3 class="m-0 fw-semibold">Trail Reviews</h3>
</div>

{{#if reviews}}
  <div class="d-flex flex-column gap-3">
    {{#each reviews}}
      <div class="card shadow-sm border-0">
        <div class="card-body">
          <div class="d-flex align-items-start gap-3 mb-2">
            <!-- Avatar -->
            <img src="{{profile_img}}" alt="{{user_name}}" class="rounded-circle" style="width: 48px; height: 48px; object-fit: cover;">

            <!-- User info -->
            <div>
              <h6 class="mb-1">{{user_name}}</h6>
              <small class="text-muted d-block">Reviewed on {{date}}</small>
              <small class="text-warning d-block">
                {{stars}}
              </small>
            </div>
          </div>

          <!-- Review text -->
          <p class="mb-0">{{description}}</p>
        </div>
      </div>
    {{/each}}
  </div>
{{else}}
  <p class="text-muted">There are no reviews for this trail yet.</p>
{{/if}}
  </div>

  <footer class="mt-5 py-4 text-center text-muted border-top">
  <small>&copy; 2025 Cool Trails · Built with ❤️ by the Cool Trails Team</small>
</footer>
    
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://unpkg.com/suncalc@1.9.0/suncalc.js"></script>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <!-- point-in-polygon helper -->
  <script src="https://unpkg.com/leaflet-pip@1.1.0/leaflet-pip.min.js"></script>

<script>
  // ──────── Weather helper ─────────
  async function getCurrentWeather(latitude, longitude) {
    const apiKey = "{{openweather_api_key}}";
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;
    try {
      const response = await fetch(apiUrl);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      return await response.json();
    } catch (err) {
      console.error("Could not fetch weather data:", err);
      return null;
    }
  }

  // ──────── Weather Table populater ─────────
  async function populateWeatherTable() {
    const lat = {{trail.center_lat}}, lon = {{trail.center_lng}};
    try {
      const weatherData = await getCurrentWeather(lat, lon);
      let weather_info = "";
      if (weatherData) {
          // Get references to the table data cells
        const desc = document.getElementById('weatherDesc');
        const temp = document.getElementById('weatherTemp');
        const humidity = document.getElementById('weatherHumidity');
        const wind = document.getElementById('weatherWind');

        const tempF = celsiusToFahrenheit(weatherData.main.temp);

        // Fill in the table data
        desc.textContent = weatherData.weather[0].description;
        temp.textContent = `${tempF}°F`;
        humidity.textContent = `${weatherData.main.humidity}%`;
        wind.textContent = `${weatherData.wind.speed} MPH`;
        
      }
    } catch (err) {
      console.error("Error in getPackingRecsInput:", err);
      throw err;
    }
  }

  function celsiusToFahrenheit(celsius) {
    const fahrenheit = (celsius * 9/5) + 32;
    return fahrenheit;
  }

  populateWeatherTable()

  // ──────── LLM input builder ─────────
  async function getPackingRecsInput() {
    const lat = {{trail.center_lat}}, lon = {{trail.center_lng}};
    try {
      const weatherData = await getCurrentWeather(lat, lon);
      let weather_info = "";
      if (weatherData) {
        weather_info +=
          `Description: ${weatherData.weather[0].description}\n` +
          `Temperature: ${weatherData.main.temp}°C\n` +
          `Feels like: ${weatherData.main.feels_like}°C\n` +
          `Humidity: ${weatherData.main.humidity}%\n` +
          `Wind Speed: ${weatherData.wind.speed} m/s`;
      }
      const llm_input =
        `Provide packing recommendations for the following trail: {{trail.name}} ` +
        `given the following information:\n${weather_info}` +
        `Give a maximum of 5 recommendations.`;
      console.log("LLM Input:", llm_input);
      return llm_input;
    } catch (err) {
      console.error("Error in getPackingRecsInput:", err);
      throw err;
    }
  }


  // ──────── Packing button hookup ─────────
  const getPackingRecsButton = document.getElementById("getPackingRecs");
  const packingLoader = document.getElementById("packing-loader");
  getPackingRecsButton.addEventListener("click", async () => {
    try {
      packingLoader.classList.remove("d-none");
      packingLoader.classList.add("d-flex");
      getPackingRecsButton.disabled = true;
      const llm_input = await getPackingRecsInput();
      const resp = await fetch(
        `/trail/{{trail.id}}/packing_recs?llm_input=${encodeURIComponent(llm_input)}`
      );
      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
      const { packing_recommendations } = await resp.json();
      renderPackingTable(packing_recommendations);
    } catch (err) {
      console.error("Error fetching packing recs:", err);
    } finally {
      // hide loader / re-enable button
      packingLoader.classList.remove("d-flex");
      packingLoader.classList.add("d-none");
      getPackingRecsButton.disabled = false;
    }
  });

  function renderPackingTable(items) {
    const container = document.getElementById("packingRecsSection");
    container.innerHTML = "";
    if (!items || items.length === 0) return;
    const rows = items
      .map(
        (it) => `
      <tr>
        <td>${it.name}</td>
        <td>${it.quantity}</td>
        <td>${it.explanation}</td>
      </tr>`
      )
      .join("");
    container.innerHTML = `
      <div class="card mb-4">
        <div class="card-header bg-info text-white">
          <h5 class="mb-0">🧳 Packing Recommendations</h5>
        </div>
        <div class="card-body p-0">
          <table class="table table-striped table-sm mb-0">
            <thead class="table-light">
              <tr><th>Item</th><th>Qty</th><th>Description</th></tr>
            </thead>
            <tbody>${rows}</tbody>
          </table>
        </div>
      </div>`;
  }

  // ──────── Shade helpers ─────────
  function sunVector(lat, lng, date = new Date()) {
    const pos = SunCalc.getPosition(date, lat, lng);
    return { az: pos.azimuth, altitude: pos.altitude };
  }
  async function cloudCover(lat, lng) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&hourly=cloudcover&forecast_days=1`;
    const data = await fetch(url).then((r) => r.json());
    const idx = data.hourly.time.indexOf(new Date().toISOString().slice(0, 13) + ":00");
    return data.hourly.cloudcover[idx];
  }

  // ──────── Map setup ─────────
  const map = L.map("map").setView([0, 0], 13);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "© OpenStreetMap contributors",
    maxZoom: 19,
  }).addTo(map);
  const trailPolygon = {{{trail.polygon}}};
  const polyLayer = L.geoJSON(trailPolygon, {
    style: { color: "#0077ff", weight: 10, opacity: 0.8 },
  }).addTo(map);
  map.fitBounds(polyLayer.getBounds(), { padding: [20, 20] });
  const center = map.getCenter();

  // ──────── Dynamic shade logic ─────────
  (async function () {
    const loader = document.getElementById("shade-loader");
    loader.style.display = "flex";
    try {
      const Δ = 0.004;
      const bbox = `${center.lat - Δ},${center.lng - Δ},${center.lat + Δ},${center.lng + Δ}`;
      const canopyFC = await fetch(`/canopy/osm?bbox=${bbox}`).then((r) => r.json());
      const canopyLayer = L.geoJSON(canopyFC, {
        style: { color: "#228b22", fillOpacity: 0.35, weight: 5 },
      }).addTo(map);

      // 1) build segments
      const segs = [];
      const coords = trailPolygon.coordinates;
      for (let i = 0; i < coords.length - 1; i++) {
        const [lon1, lat1] = coords[i],
          [lon2, lat2] = coords[i + 1];
        segs.push({
          lon1,
          lat1,
          lon2,
          lat2,
          midLat: (lat1 + lat2) / 2,
          midLon: (lon1 + lon2) / 2,
        });
      }

      // 2) batch cloud calls
      const cloudValues = await Promise.all(segs.map((s) => cloudCover(s.midLat, s.midLon)));

      // 3) draw all at once
      const altitudeThr = 15 * Math.PI / 180,
        cloudThr = 70;
      const shadeLayer = L.layerGroup().addTo(map);
      segs.forEach((s, i) => {
        const sun = sunVector(s.midLat, s.midLon),
          cloudy = cloudValues[i] > cloudThr,
          underCanopy = leafletPip.pointInLayer([s.midLon, s.midLat], canopyLayer).length > 0,
          tooLow = sun.altitude < altitudeThr,
          shaded = cloudy || underCanopy || (tooLow && sun.altitude > 0);

        L.polyline([[s.lat1, s.lon1], [s.lat2, s.lon2]], {
          color: shaded ? "green" : "orange",
          weight: 6,
          opacity: 0.9,
        }).addTo(shadeLayer);
      });
    } catch (e) {
      console.error("Shading error:", e);
    } finally {
      loader.style.display = "none";
      loader.style.zIndex = 0;

    }
  })();

  let watchId    = null;
  let userMarker = null;
  let started    = false;

  const startBtn = document.getElementById('startTrail');
  startBtn.addEventListener('click', () => {
    if (!started) {
      // first click → start watching
      if (!navigator.geolocation) {
        return alert('Geolocation not supported');
      }
      watchId = navigator.geolocation.watchPosition(pos => {
        const latlng = [pos.coords.latitude, pos.coords.longitude];
        if (!userMarker) {
          userMarker = L.marker(latlng)
            .addTo(map)
            .openPopup();
        } else {
          userMarker.setLatLng(latlng);
        }
        map.panTo(latlng);
      }, err => console.warn(err), {
        enableHighAccuracy: true,
        maximumAge:        5000,
        timeout:           5000,
      });

      startBtn.textContent = 'Re-center';
      started = true;

    } else {
      // subsequent clicks → just pan to current
      if (userMarker) {
        map.panTo(userMarker.getLatLng());
      }
    }
  });

</script>

</body>
</html>
